/*
 * Copyright 2011 University of Denver
 * Author Chet Rebman
 * 
 * This file is part of FedoraApp.
 * 
 * FedoraApp is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * FedoraApp is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with FedoraApp.  If not, see <http://www.gnu.org/licenses/>.
 */

package edu.du.penrose.systems.fedoraApp.tasks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.HttpStatus;
import org.apache.commons.httpclient.methods.GetMethod;
import org.apache.commons.httpclient.params.HttpClientParams;
import org.apache.commons.httpclient.params.HttpMethodParams;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import edu.du.penrose.systems.exceptions.FatalException;
import edu.du.penrose.systems.fedoraApp.batchIngest.bus.BatchIngestThreadManager;
import edu.du.penrose.systems.fedoraApp.batchIngest.bus.FedoraAppBatchIngestController;
import edu.du.penrose.systems.fedoraApp.batchIngest.data.BatchIngestOptions;
import edu.du.penrose.systems.fedoraApp.batchIngest.data.BatchIngestOptions.INGEST_THREAD_TYPE;
import edu.du.penrose.systems.fedoraApp.batchIngest.data.BatchIngestURLhandler;
import edu.du.penrose.systems.fedoraApp.batchIngest.data.TransformMetsData;
import edu.du.penrose.systems.fedoraApp.util.FedoraAppUtil;
import edu.du.penrose.systems.fedoraApp.web.gwt.batchIngest.server.StatusData;
import edu.du.penrose.systems.fedoraApp.FedoraAppConstants;
import edu.du.penrose.systems.fedoraApp.ProgramProperties;
import edu.du.penrose.systems.util.FileUtil;
import edu.du.penrose.systems.util.MyServletContextListener;

import edu.du.penrose.systems.fedoraApp.ProgramFileProperties;
import edu.du.penrose.systems.util.SendMail;

/**
 * Worker to run a batch ingest thread <br>
 * <br>
 * A batch ingest runs as background thread, the final report email's and the rest response will not be performed until 
 * the NEXT time this timer routine is called. Upon completion of the rest response and the e-mailing of the reports, the 
 * reports are moved from tasksTemp folder to the normal logs folder. The email's can be disabled in 'batchSet'.properties file.
 * <br><br>
 * Batch files are processed in the following order...<br>
 * 1) We look to see if a task exists and is currently running, if one is, no action is performed.<br>
 * 2) If a task exists and has completed, email reports and rest calls are performed, then files are moved to completed folders<br>
 * 3) If any reports exist in the taskTemp directories (due to a previous error), email reports and rest calls are performed, 
 * then files are moved to completed folders and task is deleted.<br>
 * 4) batchIngest.xml files are located in the work folder, in no particular order the are ALL split into the mets/new and mets/updates
 * Folders. An Ingest task is started which will process ALL files in the new and update folders, even if they were not in the 
 * batchIngest.xml file. <br>
 * 5) If no ingest task is started, we look for orphaned files in the mets/new and mets/update folders (due to previous errors).
 * An ingest task is started that will process ALL files in the new and updates folders. <br>
 * 
 * NOTE: All batchIngest files in the work queue are processed (split), not one at a time. 
 * NOTE: The report,pid report log files are not deleted. 
 * NOTE: If the email addresses are empty in the batchIngest.properties file, no email's are sent, but the rest response is sent and
 * reports are moved upon completion as normal.
 * NOTE: Files will appear in the taskTemp directory when a batch ingest Thread is processing a batchIngest.xml file in 
 * the work directory OR you are processing left over files in the mets/new or mets/update directories. 
 * 
 * @author Chet 
 *
 */
public class IngestWorker implements WorkerInf {

	private static boolean running = false; // a simple semaphore

	/**
	 * If true use _REMOTE.properties and xml files with _REMOTE suffix see FedoraAppConstants.REMOTE_TASK_NAME_SUFFIX, other wise we 
	 * use FedoraAppConstants.BACKGROUND_TASK_NAME_SUFFIX
	 */
	private boolean isRemoteIngest = true; // 

	/** Logger for this class and subclasses */
	public final  static Log logger = LogFactory.getLog( "IngestWorker".getClass() );

	/**
	 *  HAVE_SENT_FAILURE_EMAIL limits the # of failure email's sent.
	 *  
	 *  NOTE: This is not the same an ingest failure email. That is performed by the IngestWorker that performs the ingest.
	 */
	boolean HAVE_SENT_FAILURE_EMAIL = false;

	public  String FAILURE_EMAIL_FROM_ADDRESS = "";
	public final String fedoraContext = FedoraAppConstants.DU_INSTITUTION_NAME;

	private  String restReplyHost; 
	private  String restReplyPort;
	private  String restReplyPidCmd;
	private  String restReplyKey;

	protected   String institution = null;
	protected   String batchSet    = null;

	private  ProgramProperties batchSetProperties     = null;

	private ProgramProperties programProperties  = null;

	private String myName = "Name Not Set"; // set by caller.


	private final String emailIngestSubjectTxt;

	private String emailSuccessAddress = null; 
	private String emailFailureAddress = null;
	private String emailSuccessAddress_2 = null;
	private String emailFailureAddress_2 = null;

	private String smtpServerHost = null;
	private String smtpUser       = null;
	private String smtpPassword   = null;
	private String smtpPort       = null;
	private boolean sslEmail      = false;
	private String emailFromAddress = null;;


	// Constructor
	/*
	 * @param batchName is of type codu_ectd where codu is the institution and ectd is the batch set name
	 */
	public IngestWorker( String batchSetName ) // needs to be public for testing.
	{
		String[] temp            = batchSetName.split( "_" );

		this.institution = temp[0];
		this.batchSet    = temp[1];

		this.setName( batchSetName );

		this.emailIngestSubjectTxt  = this.batchSet+" Ingest Report";
	}

	public void  doWork()
	{	
		synchronized (this) 
		{
			if ( isRunning() ){
				return;
			}
			else {
				setRunning( true );
			}
		}
		try
		{
			// we call initProgramProperties each time, so that the configuration can be changed dynamically.

			this.initProgramProperties();

			boolean newBatchStarted = this.tryToStartNewBatchThread();

			if ( newBatchStarted ){
				this.logger.info( "New "+batchSet+" batch started" );
			}

		} catch (FatalException e){
			logger.error( e.getMessage() );
		}
		finally {
			setRunning( false );
		}
	}

	/**
	 * Make sure no batch is running, if one has just completed clean up any unprocessed reports (including sending the rest response) 
	 * then try to start a new batch.
	 * 
	 * @return true of a new thread was started
	 */
	public boolean tryToStartNewBatchThread()
	{
		String[] reportNames = new String[2];

		File failFolder = null;	
		boolean newIngestStarted = false;
		try 
		{		
			if ( BatchIngestThreadManager.isBatchSetThreadExists( this.getName() ) )
			{
				StatusData currentStatus = BatchIngestThreadManager.getAllBatchSetStatus( this.getName() );

				if ( currentStatus != null && currentStatus.isRunning() )
				{ 
					/**
					 * A batch is currently running, so do nothing. We do not confirm that the message was received so it will be sent again.
					 */
					return newIngestStarted; 	 
				}  


				String batchIngestFolderUrl = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_TOP_FOLDER_URL_PROPERTY );
				String batchIngestFolder    = new URL( batchIngestFolderUrl ).getFile();

				String logsFolderName = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_LOGS_FOLDER_PROPERTY );
				File       logsFolder = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + logsFolderName );

				String failFolderName = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_FAILED_FOLDER_PROPERTY );
				failFolder = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + failFolderName );


				// get the name and location of reports from the completed batch ingest thread.

				reportNames[0] = BatchIngestThreadManager.getBatchSetThread( this.getName() ).getIngestReportURL().getFile();
				reportNames[1] = BatchIngestThreadManager.getBatchSetThread( this.getName() ).getPidReportURL().getFile(); 

				File pidReportFile = new File( reportNames[1] );
				if ( pidReportFile.exists() )
				{
					performRemoteRestResponse( reportNames, this.getName(), this.restReplyHost, this.restReplyPort, this.restReplyPidCmd, this.restReplyKey );
				}

				// email results(may be disabled in properties file) - then move report files to normal log folder.

				this.emailResults( reportNames ); // this will create an empty pid file, even if it was not found above.

				try {
					BatchIngestURLhandler.transferFileToURL( new File( reportNames[0]),  logsFolder.toURI().toURL() );
					BatchIngestURLhandler.transferFileToURL( new File( reportNames[1]),  logsFolder.toURI().toURL() );
				}
				catch ( Exception e )
				{
					String errorMsg = this.getName()+" Remote  worker ERROR: "+e.getMessage();
					this.logger.error(  errorMsg );
				}

				HAVE_SENT_FAILURE_EMAIL = false;
			}

			BatchIngestThreadManager.removeBatchset( this.getName() );


			/**
			 * Before starting new batch ingest thread, make sure there are not any unprocessed report files.
			 */
			this.processReportFilesFromPreviousIngest();

			/**
			 * Let's start a new Batch Ingest!
			 */

			BatchIngestOptions batchOptions = FedoraAppUtil.loadRemoteIngestOptions( FedoraAppConstants.getServletContextListener(), this.institution, this.batchSet ); 

			if ( this.isRemoteIngest )
			{
				batchOptions.setIngestThreadType( INGEST_THREAD_TYPE.REMOTE );
			} 
			else {
				batchOptions.setIngestThreadType( INGEST_THREAD_TYPE.BACKGROUND );
			}

			batchOptions.setStmpHost( this.smtpServerHost );
			batchOptions.setStmpPort( this.smtpPort);
			batchOptions.setStmpUser( this.smtpUser );
			batchOptions.setStmpPassword( this.smtpPassword );
			batchOptions.setSuccessEmail( this.emailFailureAddress );
			batchOptions.setSuccessEmail_2( this.emailFailureAddress_2 );
			batchOptions.setFailureEmail( this.emailFailureAddress );
			batchOptions.setFailureEmail_2( this.emailFailureAddress_2 );
			batchOptions.setStmpUseSSL( this.sslEmail );
			batchOptions.setEmailFromAddress( this.emailFromAddress );

			newIngestStarted = this.startNewBatch( batchOptions );

			// NOTE: The above may not execute if another process got started first.  	
		} 
		catch (Exception e) 
		{
			String errorMsg = this.getName()+" Remote  worker ERROR: "+e.getMessage();
			this.logger.error( "Unable to start new "+this.getName()+" batch:"+e.getLocalizedMessage() );

			String[] emailToList   = new String[]{ emailFailureAddress, emailFailureAddress_2 };

			try {
				if ( ! HAVE_SENT_FAILURE_EMAIL )
				{
					this.sendEmail( emailToList, this.getName()+" Remote Ingest Failure", errorMsg, this.emailSuccessAddress, this.smtpPort, this.sslEmail );
					HAVE_SENT_FAILURE_EMAIL = true;

				}
			} catch (Exception e1) {		
				this.logger.error( "Unable to send fail email"+this.getName()+" batch:"+e1.getLocalizedMessage() );
			} 
		}

		return newIngestStarted; // a new batch ingest thread has been started.
	}

	/**
	 * if this.programProperties == null initialize it, then initialize all other program properties.
	 * @throws FatalException 
	 */
	protected void initProgramProperties() throws FatalException
	{
		if ( this.programProperties == null )
		{
			this.programProperties  = new ProgramFileProperties( new File( FedoraAppConstants.getServletContextListener().getProgramPropertiesURL().getFile() ) ); 

			// Look for either a {batchSet}_REMOTE.properties file or a {batchSet}_TASK.properties file

			File tempFile = new File( FedoraAppConstants.getServletContextListener().getInstituionURL().getFile() + "/" + this.institution + "/" + this.batchSet 
					+ "/" +this.batchSet+FedoraAppConstants.REMOTE_TASK_NAME_SUFFIX+".properties" );
			this.isRemoteIngest = true;
			if ( ! tempFile.exists() )
			{
				tempFile = new File( FedoraAppConstants.getServletContextListener().getInstituionURL().getFile() + "/" + this.institution + "/" + this.batchSet 
						+ "/" +this.batchSet+FedoraAppConstants.BACKGROUND_TASK_NAME_SUFFIX+".properties" );
				this.isRemoteIngest = false;
			}

			if ( ! tempFile.exists() ){
				String errorMsg  = "Unable to find a "+FedoraAppConstants.REMOTE_TASK_NAME_SUFFIX+" or "+ FedoraAppConstants.BACKGROUND_TASK_NAME_SUFFIX;
				throw new FatalException( errorMsg );
			}
			this.batchSetProperties = new ProgramFileProperties( tempFile );
		}

		this.emailSuccessAddress   = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SUCCESS_EMAIL_PROPERTIES   );
		this.emailFailureAddress   = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_FAILURE_EMAIL_PROPERTIES   );
		this.emailSuccessAddress_2 = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SUCCESS_EMAIL_2_PROPERTIES );
		this.emailFailureAddress_2 = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_FAILURE_EMAIL_2_PROPERTIES );

		this.smtpServerHost   = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SMTP_SERVER_PROPERTY      );
		this.smtpUser         = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SMTP_SERVER_USER_PROPERTY );
		this.smtpPassword     = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SMTP_SERVER_PWD_PROPERTY  );
		this.smtpPort         = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SMTP_SERVER_PORT_PROPERTY  );
		this.emailFromAddress = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_EMAIL_FROM_ADDRESS_PROPERTIES  );


		String  useSSL  = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_SMTP_SERVER_SSL_PROPERTY  );
		if ( useSSL != null && ( useSSL.toLowerCase().contains( "true") || useSSL.equalsIgnoreCase( "T" ) ) ) 
		{
			this.sslEmail = true;
		}

		restReplyHost   = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_REST_HOST_POPERTY );
		restReplyPort   = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_REST_PORT_PROPERTY );
		restReplyPidCmd = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_REST_PID_CMD_PROPERTY );
		restReplyKey    = this.batchSetProperties.getProperty( FedoraAppConstants.REMOTE_REST_REPLY_KEY_POPERTY );

		String jmsString = programProperties.getProperty( FedoraAppConstants.JMS_ENABLE );


	}


	/**
	 * Process log files from the previous ingest ie Send the results in an email and move the files to the logs folder.
	 * 
	 * @throws Exception 
	 */
	private void processReportFilesFromPreviousIngest() throws Exception {

		File failFolder = null;
		String[] reportNames = new String[2];
		try {

			String batchIngestFolderUrl = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_TOP_FOLDER_URL_PROPERTY );
			String batchIngestFolder    = new URL( batchIngestFolderUrl ).getFile();

			String logsToEmailFolderName = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_TASKS_TEMP_FOLDER_PROPERTY );
			File logsToEmailFolder       = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + logsToEmailFolderName );

			String logsFolderName = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_LOGS_FOLDER_PROPERTY );
			File       logsFolder = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + logsFolderName );

			String failFolderName = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_FAILED_FOLDER_PROPERTY );
			failFolder = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + failFolderName );

			// check for any unsent pid and ingest reports (due to previous failure)

			String[] logsToEmailList = FileUtil.getIngestReportList( logsToEmailFolder );	
			while ( logsToEmailList.length > 0 )
			{	  
				reportNames[ 0 ] = logsToEmailFolder + File.separator + logsToEmailList[ 0 ];
				reportNames[ 1 ] = logsToEmailFolder + File.separator + logsToEmailList[ 0 ].replace( FedoraAppConstants.BATCH_INGEST_REPORT_FILE_EXT, FedoraAppConstants.BATCH_INGEST_PID_REPORT_FILE_EXT );

				File pidReportFile = new File( reportNames[1] );
				if ( pidReportFile.exists() )
				{
					performRemoteRestResponse( reportNames, this.batchSet, this.restReplyHost, this.restReplyPort, this.restReplyPidCmd, this.restReplyKey );
				}
				this.emailResults( reportNames ); // this will create an empty pid file, even if it was not found above.
				BatchIngestURLhandler.transferFileToURL( new File( reportNames[0]),  logsFolder.toURI().toURL() );
				BatchIngestURLhandler.transferFileToURL( new File( reportNames[1]),  logsFolder.toURI().toURL() );	

				/**
				 * if we made here there were no errors, so reset this flag.
				 */
				HAVE_SENT_FAILURE_EMAIL = false; // .

				logsToEmailList = FileUtil.getIngestReportList( logsToEmailFolder ); 
			}

		} catch (Exception e) 
		{
			try {
				BatchIngestURLhandler.transferFileToURL( new File( reportNames[0]),  failFolder.toURI().toURL() );
				BatchIngestURLhandler.transferFileToURL( new File( reportNames[1]),  failFolder.toURI().toURL() );
			} catch ( Exception e1) {
				IngestWorker.logger.error( "Unable to transfer failed files"+this.getName()+" batch:"+e1.getLocalizedMessage() );
			}		

			String errorMsg =  "Unable to process orphaned report files:"+e.getLocalizedMessage();
			this.logger.error( errorMsg );

			throw new Exception( errorMsg );
		}
	}

	/**
	 * If there is not a batch currently running, start a new batch, first by processing any 
	 * orphaned files in mets new/updates folders (from previous failure), next look for new batch file
	 * in the work folder.
	 * 
	 * NOTE: If there are multiple files in the work folder, there is no guaranteed of the order in which they
	 * will be processed.
	 * 
	 * @param batchOptions
	 * @throws Exception
	 * @return true if a new batch was started.
	 */
	private  synchronized boolean startNewBatch( BatchIngestOptions batchOptions ) throws Exception
	{         
		String[] reports = new String[2];

		String batchIngestFolderUrl = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_TOP_FOLDER_URL_PROPERTY );
		String batchIngestFolder    = new URL( batchIngestFolderUrl ).getFile();
		String work_folder          = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_WORK_FOLDER_PROPERTY );
		String mets_new_folder      = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_NEW_METS_FOLDER_PROPERTY );
		String mets_update_folder   = programProperties.getProperty( FedoraAppConstants.BATCH_INGEST_UPDATES_METS_FOLDER_PROPERTY );

		File ingestWorkFolder  = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + work_folder );
		File metsNewFolder     = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + mets_new_folder );
		File metsUpdateFolder  = new File( batchIngestFolder + File.separator + institution + File.separator + batchSet + File.separator + mets_update_folder );

		String[] workFileList = null;
		File[]        newList = null;
		File[]     updateList = null;

		switch ( batchOptions.getIngestThreadType() )
		{
		case MANUAL:
			throw new FatalException( "MANUAL thread type, in a remote or background task!" );
		case REMOTE:
			workFileList = FileUtil.getRemoteBatchFileList( ingestWorkFolder );   
			newList      = FileUtil.getRemoteXmlFileList(   metsNewFolder    );
			updateList   = FileUtil.getRemoteXmlFileList(   metsUpdateFolder ); 
			break;
		case BACKGROUND:
			workFileList = FileUtil.getTaskBatchFileList( ingestWorkFolder );
			newList      = FileUtil.getTaskXmlFileList(   metsNewFolder    );
			updateList   = FileUtil.getTaskXmlFileList(   metsUpdateFolder ); 
			break;
		}

		if ( workFileList.length > 0 ) // prepare to process new batch.
		{
			// split batch and process ALL files, including any there were already there due to previous errors.
			batchOptions.setWorkFile( workFileList[0] ); 
		}
		else 
		{
			if (  newList.length > 0 || updateList.length > 0  )
			{
				/** 
				 * If there are files still waiting to be processed, due to previous failure, go ahead and process them.
				 */
				batchOptions.setSplitXMLinWorkDirToMets( false ); // ignore any work files.

				//        		if ( newList.length == 0 )
				//        		{
				/**
				 * If only performing updates, disable sending email's and rest responses.
				 */
				//        			batchOptions.runningAsTask( false ); 
				//        		}
			}
			else 
			{		
				return false; // nothing to do.
			}
		}

		FedoraAppBatchIngestController remoteIngestController = new FedoraAppBatchIngestController( new TransformMetsData(), institution, batchSet, fedoraContext, batchOptions );

		BatchIngestThreadManager.setBatchSetThread( this.getName(), remoteIngestController );

		// Create a background thread and start a new batch ingest.


		new Thread( remoteIngestController ).start();

		return true;
	}



	/**
	 * Email the pid and results file, if they do not exist, empty ones are created.
	 * 
	 * @param filesToMail [0] is the ingest report; [1] is the pid report.
	 * 
	 * @throws Exception
	 */
	public void emailResults( String[] filesToMail ) throws Exception {

		/**
		 * createNewFile() creates an empty file ONLY IF IT DOESN"T ALREADY EXIST, this only happens during an error condition.
		 */
		File ingestReportFile = new File( filesToMail[0] );
		ingestReportFile.createNewFile(); // see above
		File pidReportFile    = new File( filesToMail[1] );
		pidReportFile.createNewFile(); // see above	

		StringBuffer emailMessage = null;
		String line = "";

		BufferedReader ingestReportReader = new BufferedReader(new FileReader( ingestReportFile ));
		BufferedReader pidReportReader    = new BufferedReader(new FileReader( pidReportFile ));
		emailMessage = new StringBuffer();
		while ( (line = ingestReportReader.readLine()) != null ){
			emailMessage.append( line+"\n" );
		}
		emailMessage.append( "\n\n");
		line = pidReportReader.readLine();
		while ( line != null ){
			emailMessage.append( line.replaceAll( ",", ", " )+"\n" );
			line = pidReportReader.readLine();
		}

		String[] emailToList   = new String[]{ emailSuccessAddress, emailSuccessAddress_2 };

		sendEmail( emailToList, emailIngestSubjectTxt, emailMessage.toString(), this.emailFromAddress, this.smtpPort, this.sslEmail );

		logger.info( this.getName()+" Remote Ingest report sent");
	}

	/**
	 * 
	 * @param emailList
	 * @param emailSubject
	 * @param emailMessage
	 * @param emailFromAddress
	 * @throws Exception
	 */
	void sendEmail( String[] emailList, String emailSubject, String emailMessage, String emailFromAddress, String port, boolean sslEmail ) throws Exception
	{


		SendMail.postMailWithAuthenication( emailList, emailSubject, emailMessage,  emailFromAddress, smtpServerHost, smtpUser, smtpPassword, port, sslEmail );
	}

	public void sendFailureEmail( String errorMsg ){

		String[] emailToList   = new String[]{ emailFailureAddress, emailFailureAddress_2 };

		try 
		{		
			SendMail.postMailWithAuthenication( emailToList, this.getName()+" Remote Ingest Failure", errorMsg, FAILURE_EMAIL_FROM_ADDRESS, this.smtpServerHost, smtpUser, smtpPassword, this.smtpPort, this.sslEmail );
		} 
		catch (Exception e) {

			this.logger.error( "Unable to send failure email:"+e.getMessage()+" - The message was:"+errorMsg );
		}
	}

	public String getName() 
	{
		return this.myName;
	}

	public WorkerInf setName(String workerName) 
	{
		this.myName = workerName;

		return this;
	}


	/**
	 * After successful ingest call back to calling application for EACH PID. There is currently no rest response for updates. If the pid report 
	 * is empty(due to an error) no REST response will be performed
	 * 
	 * @param results results [0] is the ingest report. [1] is the pid report.
	 * @param batchSetName is of type 'ectd'
	 * @param restReplyHost if null or empty we return
	 * @param restReplyPort if null or empty we return
	 * @param restReplyPidCmd
	 * @param restReplyKey
	 * @throws Exception
	 */
	static public void performRemoteRestResponse( String[] results, String batchSetName, String restReplyHost, String restReplyPort, String restReplyPidCmd, String restReplyKey  ) throws Exception 
	{
		if ( restReplyHost == null  || restReplyPort == null || restReplyHost.length() == 0 || restReplyPort.length() == 0 )
		{
			return;
		}

		File pidReportFile = new File( results[1] );

		BufferedReader pidReportReader = new BufferedReader(new FileReader( pidReportFile ));
		String line = "";

		line = pidReportReader.readLine();
		String[] parsedPidLine = null;
		while ( line != null )
		{
			if ( line.compareToIgnoreCase( FedoraAppConstants.PID_REPORT_COLUMN_TITLES ) > -1 )
			{
				line = pidReportReader.readLine();
				continue;
			}

			parsedPidLine = line.split( "," );  

			if ( parsedPidLine.length < 2 ){
				throw new Exception( "Invalid line in pid report:"+line );
			}

			String[] pidTest = parsedPidLine[0].split( ":" );
			if ( pidTest.length != 2 ) 
			{
				throw new Exception( "Invalid PID!:"+line );
			}

			String pid   = parsedPidLine[0];
			String objid = parsedPidLine[1];

			if ( objid.startsWith( FedoraAppConstants.PID_REPORT_UPDATED_MARKER  ) )
			{
				logger.info( "No rest response for an update");
			}
			else if ( objid.startsWith( FedoraAppConstants.PID_REPORT_UPDATE_FAILED_MARKER  ) )
			{
				logger.info( "No rest response for a failed update");
			}
			else 
			{
				postRemoteSuccessfullAddResponse( getRemoteResponseUrl( restReplyHost, restReplyPort, restReplyPidCmd ), pid, objid, batchSetName, restReplyKey );
			}


			line = pidReportReader.readLine();
		}
	}


	/**
	 * For ectd it is
	 * http://130.253.33.105:8085/library/updatePid?id=du_174_1793_primary_1999_kelly&pid=178
	 *                        &key=6b476c7e50726949347162353c7e3d7271336e6f3e3e4c2d703d762d24	
	 *                        
	 * @param restReplyHost
	 * @param restReplyPort
	 * @param restReplyPidCmd
	 * @return
	 */
	static private String  getRemoteResponseUrl( String restReplyHost, String restReplyPort, String restReplyPidCmd )
	{
		StringBuffer remoteResultsUrl = new StringBuffer( "http://" );
		remoteResultsUrl.append( restReplyHost );
		remoteResultsUrl.append( ":" );
		remoteResultsUrl.append( restReplyPort );
		remoteResultsUrl.append( restReplyPidCmd );

		return remoteResultsUrl.toString();
	}

	/**
	 * For ectd it is
	 * http://130.253.33.105:8085/library/updatePid?id=du_174_1793_primary_1999_kelly&pid=178
	 *                        &key=6b476c7e50726949347162353c7e3d7271336e6f3e3e4c2d703d762d24	
	 *                  
	 * @param url
	 * @param pid
	 * @param objid
	 * @param batchSetName of type codu_ectd
	 * @param restReplyKey
	 * @throws Exception
	 */
	private static void postRemoteSuccessfullAddResponse( String url, String pid, String objid, String batchSetName, String restReplyKey ) throws Exception
	{		
		HttpClient client = new HttpClient();
		client.getParams().setParameter("http.useragent", "fedoraProxy Client");

		GetMethod method = new GetMethod( url );
		HttpMethodParams params = new HttpClientParams();
		params.setParameter( "id", objid );
		params.setParameter( "pid", pid );
		params.setParameter( "key", restReplyKey );

		method.setParams(params);

		try{
			int returnCode = client.executeMethod(method);

			if( returnCode != HttpStatus.SC_OK ) 
			{
				throw new Exception( "Status not ok from call to "+batchSetName+" response url: status="+returnCode+" url="+url+ "pid="+pid+" objid="+objid );
			} 
		}	      
		catch (Exception e )
		{
			throw new Exception( "Unable to send "+batchSetName+" rest response: url="+url+" "+e.getLocalizedMessage() );
		} 
		finally {
			method.releaseConnection();
		}
	}

	private static synchronized boolean isRunning() {
		return IngestWorker.running;
	}

	private static synchronized void setRunning(boolean running) {
		IngestWorker.running = running;
	}

}
